
networks:
  main-network:
volumes:
  db_setup_util_files:
  backups-storage:
  prometheus_data:
  grafana_data:

services:
  etcd1: &etcd
    image: ${PATRONI_IMAGE:-patroni}
    networks: [ main-network ]
    environment:
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: tutorial
      ETCD_UNSUPPORTED_ARCH: arm64
    container_name: etcd1
    hostname: etcd1
    command: etcd --name etcd1 --initial-advertise-peer-urls http://etcd1:2380

  etcd2:
    <<: *etcd
    container_name: etcd2
    hostname: etcd2
    command: etcd --name etcd2 --initial-advertise-peer-urls http://etcd2:2380

  etcd3:
    <<: *etcd
    container_name: etcd3
    hostname: etcd3
    command: etcd --name etcd3 --initial-advertise-peer-urls http://etcd3:2380

  haproxy:
    image: ${PATRONI_IMAGE:-patroni}
    networks: [ main-network ]
    env_file: patroni/docker/patroni.env
    hostname: haproxy
    container_name: haproxy
    ports:
      - "5000:5000"
      - "5001:5001"
    command: haproxy
    environment: &haproxy_env
      ETCDCTL_ENDPOINTS: http://etcd1:2379,http://etcd2:2379,http://etcd3:2379
      PATRONI_ETCD3_HOSTS: "'etcd1:2379','etcd2:2379','etcd3:2379'"
      PATRONI_SCOPE: main-network
      PGDATA: "/home/postgres/data"
      

  patroni1:
    image: ${PATRONI_IMAGE:-patroni}
    networks: [ main-network ]
    env_file: patroni/docker/patroni.env
    hostname: patroni1
    container_name: patroni1
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni1

  patroni2:
    image: ${PATRONI_IMAGE:-patroni}
    networks: [ main-network ]
    env_file: patroni/docker/patroni.env
    hostname: patroni2
    container_name: patroni2
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni2

  patroni3:
    image: ${PATRONI_IMAGE:-patroni}
    networks: [ main-network ]
    env_file: patroni/docker/patroni.env
    hostname: patroni3
    container_name: patroni3
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni3

  db-setup:
    build:
      args:
        PY_IMAGE_TAG : ${PYTHON_IMAGE_TAG}
      context: ./db_setup
    networks: [ main-network ]
    container_name: db-setup
    restart: no
    depends_on:
      - haproxy
    volumes:
      - ./db_setup/scripts:/usr/src/db_setup/scripts:ro
      - db_setup_util_files:/usr/src/db_setup/util_files/
    env_file:
      - path: ./config/db.env
      - path: ./config/setup.env
    environment: &connect_env
      HAPROXY_PRIMARY_PORT: ${HAPROXY_PRIMARY_PORT}
      HAPROXY_REPLICAS_PORT: ${HAPROXY_REPLICAS_PORT}
      DB_HOSTNAME: ${DB_HOSTNAME}

  postgres-exporter:
    image: bitnami/postgres-exporter:${POSTGRES_EXPORTER_IMAGE_TAG}
    container_name: postgres-exporter
    hostname: postgres-exporter
    environment:
        DATA_SOURCE_NAME: "postgresql://${POSTGRES_EXPORTER_USER}:${POSTGRES_EXPORTER_PASSWORD}@${DB_HOSTNAME}:${HAPROXY_PRIMARY_PORT}/${POSTGRES_EXPORTER_DB_NAME}?sslmode=disable"
    command:
      - '--collector.postmaster'
      - '--collector.stat_statements'
    ports:
      - 9187:9187
    depends_on:
      db-setup:
        condition: service_started
        # condition: service_completed_successfully
    networks: [ main-network ]

  prometheus:
    image: prom/prometheus:${PROMETHEUS_IMAGE_TAG}
    container_name: prometheus
    hostname: prometheus
    networks: [ main-network ]
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - 9090:9090
    depends_on:
      - postgres-exporter
    restart: unless-stopped

  grafana:
    image: grafana/grafana:${GRAFANA_IMAGE_TAG}
    container_name: grafana
    hostname: grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    networks: [ main-network ]

  backups-and-util:
    image: postgres:${POSTGRES_IMAGE_TAG}
    container_name: backups-and-util
    networks: [ main-network ]
    command: [ "bash", "-c", "/app/backups/create_roles.sh && /app/backups/do_backups.sh" ]
    volumes:
      - backups-storage:/backups_storage/
      - ./backups/:/app/backups/:ro
    depends_on:
      db-setup:
        condition: service_started
        # condition: service_completed_successfully
    environment:
      <<: *connect_env
    env_file:
      - ./config/backups-and-util.env
    restart: unless-stopped

  admin-gui:
    image: adminer
    container_name: admin-gui
    restart: unless-stopped
    depends_on: 
    - haproxy
    ports:
    - 8080:8080
    networks: [ main-network ]

